// Generated by gencpp from file raspi_serial/transmit_data.msg
// DO NOT EDIT!


#ifndef RASPI_SERIAL_MESSAGE_TRANSMIT_DATA_H
#define RASPI_SERIAL_MESSAGE_TRANSMIT_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raspi_serial
{
template <class ContainerAllocator>
struct transmit_data_
{
  typedef transmit_data_<ContainerAllocator> Type;

  transmit_data_()
    : tx_string()  {
    }
  transmit_data_(const ContainerAllocator& _alloc)
    : tx_string(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _tx_string_type;
  _tx_string_type tx_string;





  typedef boost::shared_ptr< ::raspi_serial::transmit_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raspi_serial::transmit_data_<ContainerAllocator> const> ConstPtr;

}; // struct transmit_data_

typedef ::raspi_serial::transmit_data_<std::allocator<void> > transmit_data;

typedef boost::shared_ptr< ::raspi_serial::transmit_data > transmit_dataPtr;
typedef boost::shared_ptr< ::raspi_serial::transmit_data const> transmit_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raspi_serial::transmit_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raspi_serial::transmit_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace raspi_serial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'raspi_serial': ['/home/ubuntu/catkin_ws/src/raspi_serial/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::raspi_serial::transmit_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raspi_serial::transmit_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspi_serial::transmit_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspi_serial::transmit_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspi_serial::transmit_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspi_serial::transmit_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raspi_serial::transmit_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6991089b0d19ddc329f4db889c0f15a2";
  }

  static const char* value(const ::raspi_serial::transmit_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6991089b0d19ddc3ULL;
  static const uint64_t static_value2 = 0x29f4db889c0f15a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::raspi_serial::transmit_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raspi_serial/transmit_data";
  }

  static const char* value(const ::raspi_serial::transmit_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raspi_serial::transmit_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message buffer for transmitting data\n\
\n\
uint8[] tx_string\n\
";
  }

  static const char* value(const ::raspi_serial::transmit_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raspi_serial::transmit_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tx_string);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct transmit_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raspi_serial::transmit_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raspi_serial::transmit_data_<ContainerAllocator>& v)
  {
    s << indent << "tx_string[]" << std::endl;
    for (size_t i = 0; i < v.tx_string.size(); ++i)
    {
      s << indent << "  tx_string[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.tx_string[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RASPI_SERIAL_MESSAGE_TRANSMIT_DATA_H
